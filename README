
Hello thanks so much for taking the time to review this project. Setting up the project should be as simple as running go mod tidy and then connecting a database.
Currently the project is set up to postgres and I decided to use that flavor of sql as it was apart of the job description. When the application starts, the application will
automatically create the tables needed if they do not exist. I did this to aid in the submission process so that you wouldn't have to do it manually.  If you would like to preload some dinosaurs into the database
there is an endpoint that will preload some dinosaurs for you to get you started: "/api/dino/preload"

All of the the primary business requirements should be working and several of the Bonus Points as well. This includes:

• Cages have a maximum capacity for how many dinosaurs it can hold.
• Cages know how many dinosaurs are contained.
• Cages have a power status of ACTIVE or DOWN.
• Cages cannot be powered off if they contain dinosaurs.
• Dinosaurs cannot be moved into a cage that is powered down

Also I've added additional logic to the application that I believe would make sense in this situation as will. Much of that logic would be verification checks, for example the application won't allow you to create
a cage with dinosaurs that don't exist in the database. That is another reason a add the preload endpoint.

In a production or concurrent environment, I would definitely do some refactoring to make methods cleaner and also so clean up some of the database logic as well. I used the db
to do some extra things such as working with the current_occupancy of the cages, where I used postgres to do those calculations, I would more then like do more of that to help to take some
responsibly off of the software. Small things such as that can aid in performance when done correctly.

If you have any questions just let me know.
